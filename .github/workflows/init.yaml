name: Ka0s

on:
  push:
    branches:
      - 'main'
      - 'release/new'
      - 'feature'
      - 'hotfix'

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

jobs:
  kaos-init-process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
      # Checkout the repository to get the information of the commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_TOKEN }}

      - name: Set Info about Commit temp vars
        # Set the branch name and team name and file implicit in commit and save it in the environment variable
        run: |
          BRANCH_NAME=${{ github.event.base_ref }}
          USER_NAME=${{ github.actor.name}}
          USER_EMAIL=${{ github.actor.email }}
          PATH_RESUME="./core/results/"
          KAOS_MODULE="[CORE INIT]"
          KAOS_STEP_MODULE=""
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "USER_NAME=$USER_NAME" >> $GITHUB_ENV
          echo "USER_EMAIL=$USER_EMAIL" >> $GITHUB_ENV
          echo "PATH_RESUME=$PATH_RESUME" >> $GITHUB_ENV
          echo "KAOS_MODULE=$KAOS_MODULE" >> $GITHUB_ENV
          echo "KAOS_STEP_MODULE=$KAOS__STEP_MODULE" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Generate files report
        run: |
          # Crear un fichero de resumen con todos los datos de los commits asociados, esta información es usada en todo el ciclo de vida del workflow
          # en cada paso este fichero actualiza el contenido, dado que el workflow deja registro en tres partes distintas
          git log ${{ github.event.before }}..${{ github.sha }} --pretty=format:'%H%n%an%n%ae%n%ad%n%s' > ${{ env.PATH_RESUME }}commit-summary-${{ env.DATETIME }}.txt
          # Crear un fichero con la ruta completa y el nombre ficheros implicados en el commit
          # este paso es el que provoca que el workflow siga un camino u otro
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > ${{ env.PATH_RESUME }}files-in-commit-${{ env.DATETIME }}.txt
          INVOLVED=$(cat ${{ env.PATH_RESUME }}files-in-commit-${{ env.DATETIME }}.txt)
          echo "INVOLVED=$INVOLVED" >> $GITHUB_ENV

      - name: We check the module where the action is to be performed
        env:
          kaos-modules: ${{ secrets.KAOS_CORE_MODULES }}
        run: |
          # vamos a determinar que accion debera de ser la siguiente en el flujo
          modules="${{ secrets.KAOS_CORE_MODULES }}"
          IFS=',' read -r -a module_array <<< "$modules"
          while IFS= read -r line; do
            for module in "${module_array[@]}"; do
              if [[ "$line" == *"$module"* ]]; then
                file_name=$(basename "$line")
                file_extension="${file_name##*.}"
                echo "Encontrado el módulo: $module"
                echo "Nombre del fichero: $file_name"
                echo "Extensión del fichero: $file_extension"
                echo "FILE_NAME=$file_name" >> $GITHUB_ENV
                echo "FILE_EXTENSION=$file_extension" >> $GITHUB_ENV
              else
                echo "A este módulo no tiene acceso: $module"
                echo "Module $module does not exist in secrets"
                  # en este caso deberemos de genarar una issue indicando de una acción no permitida y el máximo detalle
                  KAOS_ISSUE_TITLE="${{ env.KAOS_MODULE }} Action Failed: ${{ github.workflow }}"
                  KAOS_ISSUE_BODY=$(printf "This is a resume to the ${{ env.KAOS_MODULE }} Action workflow **${{ github.workflow }}**.\nIt has been requested by: **${{ github.actor }}**\n\n**Success Message:**\n\`\`\`\nPlease check the job logs for ${{ secret.KAOS_ACTIONS_URL }}${{ github.run_id }}\n**Please check the issues for more details**\n\`\`\`\n\n**Workflow Name:** ${{ github.workflow }}\n**Job Name:** ${{ github.job }}\n**Run ID:** ${{ github.run_id }}\n**Run Number:** ${{ github.run_number }}\n**Repository:** ${{ github.repository }}\n**Branch:** ${{ github.ref }}\n**Commit:** ${{ github.sha }}\n\n**Files Involved:**\n${{ env.INVOLVED }}\n")
              fi
            done
          done < ${{ env.PATH_RESUME }}files-in-commit-${{ env.DATETIME }}.txt

      - name: Upload parameter file
        uses: actions/upload-artifact@v4
        with:
          name: reports-files
          path: |
            ${{ env.PATH_RESUME }}commit-summary-${{ env.DATETIME }}.txt
            ${{ env.PATH_RESUME }}files-in-commit-${{ env.DATETIME }}.txt
      
      - name: Check execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_TOKEN }}
        if: failure()
        run: |
          echo "Error detected in KaoS INIT, creating issue..."
          KAOS_ISSUE_TITLE="${{ env.KAOS_MODULE }} Action Failed: ${{ github.workflow }}"
          KAOS_ISSUE_BODY=$(cat <<'EOF'
          An error occurred in the ${{ env.KAOS_MODULE }} Action workflow **${{ github.workflow }}**.
          **[KAOS INIT]  Message:**
          \`\`\`
          **Please check the job logs for https://github.com/mapfre-tech/cloud-tec-automation-catalog/actions/runs/${{ github.run_id }}**
          \`\`\`
          **Workflow Name:** ${{ github.workflow }}
          **Job Name:** ${{ github.job }}
          **Run ID:** ${{ github.run_id }}
          **Run Number:** ${{ github.run_number }}
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref }}
          **Commit:** ${{ github.sha }}
          **Files Involved:**
          ${{ env.INVOLVED }}
          Please investigate the issue.
          EOF
          )
          gh issue create --title "$KAOS_ISSUE_TITLE" --body "$KAOS_ISSUE_BODY" --label "bug,core" --repo ${{ github.repository }}
          GH_ISSUE_ID=$(gh issue list --repo ${{ github.repository }} --limit 1 --json number,title --jq '.[] | select(.title=="'"${{ github.event.inputs.kaos-issue-kaos-issue-title }}"'") | .number')
          echo "KAOS_ISSUE_ID=$GH_ISSUE_ID" >> $GITHUB_ENV
          "KAOS_ISSUE_ID is ${{ env.KAOS_ISSUE_ID }}"

