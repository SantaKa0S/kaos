name: Ka0s Issues
on:
  workflow_dispatch:
    inputs:
      kaos-issue-title:
        description: 'Title'
        default: "Kaos Issue Title Example"
        required: true
      kaos-issue-body:
        description: 'Body'
        default: "Kaos Issue Body Example"
        required: true
      kaos-issue-body-file:
        description: 'Attach file to body'
        default: ""
        required: false
      kaos-issue-actions:
        description: 'Issue Actions'
        default: "comment"
        required: false
        type: choice
        options:
        - create
        - comment
        - close
        - reopen
      kaos-issue-tag:
        description: 'Issue tag'
        default: "bug"
        required: false
      kaos-issue-id:
        description: 'Issue ID'
        default: ""
        required: false
      kaos-workflow-id:
        description: 'Workflow ID'
        default: ""
        required: false
      kaos-user-start:
        description: 'User initiated process'
        default: ""
        required: false 
permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write
env:
  KAOS_MODULE: "[Ka0S] ISSUE"
  GH_TOKEN: ${{ secrets.KAOS_TOKEN }}
  BRANCH_NAME: ${{ github.ref }}
  KAOS_REPO: "/actions-runner/_work/kaos/kaos"
  KAOS_STEP_MODULE: ""
  KAOS_CODE: ${{ github.run_id }}
jobs:
  kaos-issue-process:
    runs-on: 
      group: kaos-issue
    outputs:
      KAOS_WORFLOW_LOG: ${{ steps.resume-log.outputs.KAOS_WORFLOW_LOG }}
    steps:
      - id: repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_TOKEN }}

      - id: resume-log
        run: |
          # Extraemos el error
          # gh run view ${{ github.event.inputs.kaos-workflow-id }} --log-failed > ${{ github.event.inputs.kaos-workflow-id }}.log
          # echo "KAOS_WORFLOW_LOG=$(cat ${{ github.event.inputs.kaos-workflow-id }}.log)" >> $GITHUB_OUTPUT

      - id: work-issues
        run: |
            # Lo primero comprobar la acción que queremos realizar
            echo "El usuario culpable es: ${{ github.event.inputs.kaos-user-start }}"
            case ${{ github.event.inputs.kaos-issue-actions }} in
                create)
                    # Abrimos la petición y pasamos el issue ID a la variable de repositorio KAOS_ISSUE_ID
                    gh issue create -t "${{ github.event.inputs.kaos-issue-title }}" -b "${{ github.event.inputs.kaos-issue-body }}" -l "${{ github.event.inputs.kaos-issue-tag }}" -a "${{ github.event.inputs.kaos-user-start }}"
                    if [[ -z "${{ steps.resume-log.outputs.KAOS_WORFLOW_LOG }}" ]]; then
                      echo "No se ha encontrado el log de la ejecución"
                    else
                      gh issue comment ${{ github.event.inputs.kaos-issue-id }} --body-file "${{ steps.resume-log.outputs.KAOS_WORFLOW_LOG }}"
                    fi
                    ;;
                comment)
                    # Añadimos comentarios a issue en concreto o ficheros
                    if [[ -z "${{ github.event.inputs.kaos-issue-body-file }}" ]]; then
                      gh issue comment ${{ github.event.inputs.kaos-issue-id }} -b "${{ github.event.inputs.kaos-issue-body }}"
                    else
                      gh issue comment ${{ github.event.inputs.kaos-issue-id }} --body-file "${{ github.event.inputs.kaos-issue-body-file }}"
                      # Esta opción se añadira más adelante --body-file "${{ github.event.inputs.kaos-issue-body-file }}"
                    fi
                  ;;
                close)
                    # Cerramos una issue finalizada
                    gh issue close ${{ github.event.inputs.kaos-issue-id }} -c "Issue: ${{ github.event.inputs.kaos-issue-id }} closed by  ${{ github.event.inputs.kaos-user-start }}" -r "completed"
                  ;;
                reopen)
                    # Reabrimos una issue que no ha sido solucionada
                    title="${{ github.event.inputs.kaos-issue-title }}"
                    if [[ "$title" == *"[SUCCESS]"* ]]; then
                      echo "Found [SUCCESS] in the title"
                      new_title="${title//[SUCCESS]/[FAILED]}"
                      echo "new_title=$new_title" >> $GITHUB_ENV
                    fi
                    gh issue reopen ${{ github.event.inputs.kaos-issue-id }} -c "Reopen Issue: ${{ github.event.inputs.kaos-issue-id }} by  ${{ github.event.inputs.kaos-user-start }}"
                    gh issue edit ${{ github.event.inputs.kaos-issue-id }} -t "$new_title"
                    gh issue edit ${{ github.event.inputs.kaos-issue-id }} --remove-label "resolved"
                  ;;
                *)
                    # Si no es alguna de las anteriores
                    # el modulo de issues fallara y creara una issue propia  
                  ;;
            esac

  handle_failure:
    runs-on: 
      group: kaos-issue
    needs: [kaos-issue-process]
    if: ${{ failure() }}
    steps:
      - id: check-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_TOKEN }}
        run: |
          echo "Error detected in ${{ env.KAOS_MODULE }}, creating issue..."
          KAOS_ISSUE_TITLE="${{ env.KAOS_MODULE }} Module failed in ${{ github.run_id }}"
          KAOS_BODY=$(cat <<'EOF'
            **${{ env.KAOS_MODULE }}  Message:**
            El error ha sido en: ${{ env.KAOS_CODE }}
            si dispòne de los permisos necesarios 
            ejecute este comando en su consola y podrá consultar el fallo del trabajo
            gh run view ${{ env.KAOS_CODE }} --log-failed
            \`\`\`
            **La información de la ejecución ${{ secrets.KAOS_ACTIONS_URL }}${{ env.KAOS_CODE }}**
            \`\`\`
            Please investigate the issue.
            EOF
            )
          gh issue create -t "$KAOS_ISSUE_TITLE" -b "$KAOS_ISSUE_BODY" -l "bug" -a "${{ github.event.inputs.kaos-user-start }}"
          # Buscamos el numero de la issue en funcion del titulo de la misma 
          ISSUE_NUMBRE=$(gh issue list --limit 1 --state open --label bug --json number --jq '.[0].number')
          # Añadimos el comentario a la issue que dispara el proceso
          KAOS_ISSUE_BODY="Se ha generado la issue (#$ISSUE_NUMBRE) por la acción ${{ github.event.inputs.kaos-workflow-id }} desde el issue #${{ github.event.inputs.kaos-issue-id }} creada por ${{ github.event.inputs.kaos-user-start }}"
          gh issue comment ${{ github.event.inputs.kaos-issue-id }} -b "$KAOS_ISSUE_BODY"
   
