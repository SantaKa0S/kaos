name: Ka0s Issues

on:
  workflow_dispatch: # Permite disparar workflow manualmente
    inputs:
      kaos-issue-title:
        description: 'Title'
        default: "Kaos Issue Title Example"
        required: true
      kaos-issue-body:
        description: 'Body'
        default: "Kaos Issue Body Example"
        required: true
      kaos-issue-body-file:
        description: 'Attach file to body'
        default: ""
        required: false
      kaos-issue-actions:
        description: 'Issue Actions'
        default: "comment"
        required: false
        type: choice
        options:
        - create
        - comment
        - close
        - reopen
      kaos-issue-tag:
        description: 'Issue tag'
        default: "bug"
        required: false
      kaos-issue-id:
        description: 'Issue ID'
        default: ""
        required: false
      kaos-workflow-id:
        description: 'Workflow ID'
        default: ""
        required: false
  
permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

env:
  GH_TOKEN: ${{ secrets.KAOS_TOKEN }}
  KAOS_MODULE: "[Ka0S] ISSUE"
jobs:
  kaos-issue-process:
    runs-on: kaos-issue

    steps:
      - id: repo # Checkout the repository to get the information of the commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_TOKEN }}

      - id: resume-log
        run: |
          # Extraemos el error
          # Extraemos el error
          # gh run view ${{ github.event.inputs.kaos-workflow-id }} --log-failed > ${{ github.event.inputs.kaos-workflow-id }}.log
          # echo "KAOS_WORFLOW_LOG=$(cat ${{ github.event.inputs.kaos-workflow-id }}.log)" >> $GITHUB_OUTPUT

      - id: work-issues
        run: |
            # Lo primero comprobar la acción que queremos realizar
            case ${{ github.event.inputs.kaos-issue-actions }} in
                create)
                    # Abrimos la petición y pasamos el issue ID a la variable de repositorio KAOS_ISSUE_ID
                    gh issue create -t "${{ github.event.inputs.kaos-issue-title }}" -b "${{ github.event.inputs.kaos-issue-body }}" -l "${{ github.event.inputs.kaos-issue-tag }}" -a "${{ github.actor }}"
                    # gh issue comment ${{ github.event.inputs.kaos-issue-id }} --body-file "${{ github.event.inputs.kaos-workflow-id }}.log"
                    ;;
                comment)
                    # Añadimos comentarios a una issue en concreto o ficheros
                    if [[ -z "${{ github.event.inputs.kaos-issue-body-file }}" ]]; then
                      gh issue comment ${{ github.event.inputs.kaos-issue-id }} -b "${{ github.event.inputs.kaos-issue-body }}"
                    else
                      gh issue comment ${{ github.event.inputs.kaos-issue-id }} -b "${{ github.event.inputs.kaos-issue-body }}" 
                      # Esta opción se añadira más adelante --body-file "${{ github.event.inputs.kaos-issue-body-file }}"
                    fi
                  ;;
                close)
                    # Cerramos una issue finalizada
                    gh issue close ${{ github.event.inputs.kaos-issue-id }} -c "Issue: ${{ github.event.inputs.kaos-issue-id }} closed by  ${{ github.actor }}" -r "completed"
                  ;;
                reopen)
                    # Reabrimos una issue que no ha sido solucionada
                    title="${{ github.event.inputs.kaos-issue-title }}"
                    if [[ "$title" == *"[SUCCESS]"* ]]; then
                      echo "Found [SUCCESS] in the title"
                      new_title="${title//[SUCCESS]/[FAILED]}"
                      echo "new_title=$new_title" >> $GITHUB_ENV
                    fi
                    gh issue reopen ${{ github.event.inputs.kaos-issue-id }} -c "Reopen Issue: ${{ github.event.inputs.kaos-issue-id }} by  ${{ github.actor }}"
                    gh issue edit ${{ github.event.inputs.kaos-issue-id }} -t "$new_title"
                    gh issue edit ${{ github.event.inputs.kaos-issue-id }} --remove-label "resolved"
                  ;;
                *)
                    # Si no es alguna de las anteriores
                    # el modulo de issues fallara y creara una issue propia  
                  ;;
            esac

  handle_failure:
    runs-on: 
      group: kaos-issue
    needs: [kaos-issue-process]
    if: ${{ failure() }}
    steps:
      - id: check-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_TOKEN }}
        run: |
          echo "Error detected in ${{ env.KAOS_MODULE }}, creating issue..."
          KAOS_ISSUE_TITLE="${{ env.KAOS_MODULE }} Action Failed: ${{ github.workflow }}"
          KAOS_ISSUE_BODY=$(cat <<'EOF'
          An error occurred in the ${{ env.KAOS_MODULE }} Action workflow **${{ github.workflow }}**.
          **${{ env.KAOS_MODULE }}  Message:**
          El error ha sido en : ${{  github.run_id }}
          ejecute este comando en su consola y podrá consultar el fallo del trabajo
          gh run view ${{  github.run_id }} --log-failed
          \`\`\`
          **Please check the job logs for ${{ secrets.KAOS_ACTIONS_URL }}${{ github.run_id }}**
          \`\`\`
          **Workflow Name:** ${{ github.workflow }}
          **Job Name:** ${{ github.job }}
          **Run ID:** ${{ github.run_id }}
          **Run Number:** ${{ github.run_number }}
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref }}
          **Commit:** ${{ github.sha }}
          Please investigate the issue.
          EOF
          )
          gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-title="$KAOS_ISSUE_TITLE" -f kaos-issue-body="$KAOS_ISSUE_BODY" -f kaos-issue-actions=create -f kaos-issue-tag="bug"   
