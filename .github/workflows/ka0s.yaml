name: Ka0S

on:
  push: 
    paths:
      - '**.yaml'
      - '**.json'
      - '**.md'
      - '**/Dockerfile'
    branches:
      - 'H*'
      - 'F*'
      - 'RN*'
permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write
env:
  KAOS_MODULE: "[Ka0S]"
  GH_TOKEN: ${{ secrets.KAOS_TOKEN }}
  BRANCH_NAME: ${{ github.ref }}
  KAOS_PATH_RESUME: "core/results/"
  KAOS_PATH_OUTPUT: "core/outputs/e/"
  KAOS_REPO: "/actions-runner/_work/kaos/kaos"
  KAOS_STEP_MODULE: ""
  KAOS_CODE: ${{ github.run_id }}
jobs: 
  job-core:
    if: ${{ !contains(github.event.head_commit.message, '[Ka0S] ') }} 
    runs-on: 
      group: kaos
    outputs:
      KAOS_BRANCH: ${{ steps.core.outputs.RNBRANCH }}
      KAOS_NUMBER: ${{ steps.core.outputs.RNNUMBER }}
      KAOS_INVOLVED: ${{ steps.files.outputs.INVOLVED }}
      KAOS_CORE_STATUS: ${{ steps.files.outputs.KAOS_STATUS }}
      KAOS_FILES: ${{ steps.core.outputs.CHANGED_FILES }}
      AUTHOR_NAME: ${{ steps.core.outputs.AUTHOR_NAME }}
      AUTHOR_EMAIL: ${{ steps.core.outputs.AUTHOR_EMAIL }}
      COMMIT_MESSAGE: ${{ steps.core.outputs.COMMIT_MESSAGE }}
    steps:
      - id: repo
        name: repo
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_TOKEN }}         
      - id: core
        name: core
        if: ${{ !contains(github.event.head_commit.message, '[Ka0S] ') }}
        run: |
          # Comprobamos el flow que deberemos de ejecutar
          echo "Branch name is ${{ github.ref }}"
          case "${{ github.ref }}" in
            *RN[0-9]*-*)
              rn=$(echo "${{ github.ref }}" | grep -o 'RN[0-9]*')
              ;;
            *F[0-9]*-*)
              rn=$(echo "${{ github.ref }}" | grep -o 'F[0-9]*')
              ;;
            *H[0-9]*-*)
              rn=$(echo "${{ github.ref }}" | grep -o 'H[0-9]*')
              ;;
            *E[0-9]*-*)
              rn=$(echo "${{ github.ref }}" | grep -o 'H[0-9]*')
              ;;
            *)
              echo "No debería de estar haciendo esto"
              exit 1
              ;;
          esac
          RNBRANCH=$(echo "$rn" | grep -o '^[A-Za-z]*')
          RNNUMBER=$(echo "$rn" | grep -o '[0-9]*')
          echo "Extracted RN Branch: $RNBRANCH"
          echo "Extracted RN Number: $RNNUMBER"
          KAOS_CODE_FILES=$(echo "$rn" | grep -o '^[A-Za-z]*')-$(echo "$rn" | grep -o '[0-9]*')
          echo "RNBRANCH=$RNBRANCH" >> $GITHUB_OUTPUT
          echo "RNNUMBER=$RNNUMBER" >> $GITHUB_OUTPUT   
          echo "AUTHOR_NAME=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_OUTPUT
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
          echo "CHANGED_FILES=$(git diff --name-only HEAD~1 | tr '\n' ' ')" >> $GITHUB_OUTPUT
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          touch ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-$RNBRANCH.txt
          echo "($_timestamp) - Se ha iniciado el Repositorio." >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-$RNBRANCH.txt
          echo "($_timestamp) - Se detecta el flujo $RNBRANCH." >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-$RNBRANCH.txt
      - id: files
        name: files
        if: ${{ always() }}
        run: |
          # Crear un fichero de resumen con todos los datos de los commits asociados, esta información es usada en todo el ciclo de vida del workflow
          git log ${{ github.event.before }}..${{ github.sha }} --pretty=format:'%H%n%an%n%ae%n%ad%n%s' > ${{ env.KAOS_PATH_RESUME }}commit-summary-$KAOS_CODE_FILES.txt
          # Crear un fichero con la ruta completa y el nombre ficheros implicados en el commit
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > ${{ env.KAOS_PATH_RESUME }}files-in-commit-$KAOS_CODE_FILES.txt
          # Subimos la lista de ficheros que tenemos que comprobar
          gh issue comment ${{ steps.core.outputs.RNNUMBER }} --body "Comienza la ejecución de KAOS run_id: ${{ env.KAOS_CODE }}"
          INVOLVED=${{ env.KAOS_PATH_RESUME }}files-in-commit-$KAOS_CODE_FILES.txt
          echo "INVOLVED=$INVOLVED" >> $GITHUB_OUTPUT
          git config --global user.name "${{ secrets.KAOS_USER_NAME }}"
          git config --global user.email "${{ secrets.KAOS_USER_EMAIL }}"
          git pull
          git add ${{ env.KAOS_PATH_RESUME }}*
          git commit -m "[Ka0S] se generan los ficheros commit-summary files-in-commit"
          git push
          KAOS_STATUS=$( echo "100%")
          echo "KAOS_CORE_STATUS=$KAOS_STATUS" >> $GITHUB_OUTPUT
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "($_timestamp) - Se genera el fichero de commit ${{ env.KAOS_PATH_RESUME }}commit-summary-$KAOS_CODE_FILES.txt." >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-$RNBRANCH.txt
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "($_timestamp) - Se genera el fichero de ficheros implicados ${{ env.KAOS_PATH_RESUME }}files-in-commit-$KAOS_CODE_FILES.txt." >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-$RNBRANCH.txt
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "($_timestamp) - JOB_CORE: $KAOS_STATUS" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-$RNBRANCH.txt           
  job-compliance:
    runs-on: 
      group: kaos
    needs: job-core  
    steps:
      - id: check-compliance
        name: check-compliance
        run: |
          # Vamos a determinar  la accion de comprobar el cumplimiento de las politicas
          echo "Aquí deberemos de añadir el código del compliance de la organización"
          KAOS_COMPLIANCE_STATUS=$( echo "100%")
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "($_timestamp) - JOB_COMPLIANCE: $KAOS_COMPLIANCE_STATUS" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ needs.job-core.outputs.KAOS_NUMBER }}.txt               
  job-security:
    runs-on: 
      group: kaos
    needs: [job-core, job-compliance]
    steps:
      - id: check-security
        name: check-security
        run: |
          # Vamos a determinar la accion de comprobar el cumplimiento de las politicas
          echo "Aquí deberemos de añadir el código del security check de la organización"
          KAOS_SECURITY_STATUS=$( echo "100%")
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "($_timestamp) - JOB_SECURITY: $KAOS_SECURITY_STATUS" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ needs.job-core.outputs.KAOS_NUMBER }}.txt
  job-observability:
    runs-on: 
      group: kaos
    needs: [job-core, job-compliance, job-security]
    steps:
      - id: check-observability
        name: Check Observability
        run: |
          # Vamos a determinar la accion de comprobar el cumplimiento de las politicas
          echo "Aquí deberemos de añadir el código del observability check de la organización"
          KAOS_OBSERVABILITY_STATUS=$( echo "100%")
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "($_timestamp) - JOB_OBSERVABILITY: $KAOS_OBSERVABILITY_STATUS" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ needs.job-core.outputs.KAOS_NUMBER }}.txt
  job-codescan:
    runs-on: 
      group: kaos-codescan
    needs: [job-core, job-compliance, job-security, job-observability]
    outputs:
      KAOS_CODESCAN_STATUS: ${{ steps.check-content-upload.outputs.KAOS_CODESCAN_STATUS }}
    steps:
      - id: repo
        name: repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_TOKEN }}
      - id: codescan
        name: codescan
        run: |
          # Vamos a determinar la accion de comprobar el codigo de todos los filesystem
          trivy repo ${{ env.KAOS_REPO}} --scanners vuln,misconfig,secret,license --severity MEDIUM,HIGH,CRITICAL  --output ${{ env.PATH_RESUME}}trivy-report-${{ github.run_id }}.md     
      - id: check-content-upload
        name: check-content-upload
        run: |
          # Comprobamos el contenido del fichero generado
          if [ -s ${{ env.PATH_RESUME}}trivy-report-${{ github.run_id }}.md ]; then
            echo "El fichero tiene contenido"
            KAOS_CODESCAN_STATUS=$(echo '0%')
            echo "KAOS_CODESCAN_STATUS=$KAOS_CODESCAN_STATUS" >> $GITHUB_OUTPUT
            # Añadimos a la Issue el fichero con el resultado del escaner actual
            gh issue comment  ${{ needs.job-core.outputs.KAOS_NUMBER }} -F ${{ env.PATH_RESUME}}trivy-report-${{ github.run_id }}.md
          else
            echo "El fichero no tiene contenido"
            KAOS_CODESCAN_STATUS=$(echo '100%')
            echo "KAOS_CODESCAN_STATUS=$KAOS_CODESCAN_STATUS" >> $GITHUB_OUTPUT
          fi
  job-flows:
    needs: [job-core, job-codescan] 
    if: ${{ needs.job-codescan.outputs.KAOS_CODESCAN_STATUS == '100%' }}
    outputs:
      KAOS_BODY_ISSUE: ${{ steps.release-new-flow.outputs.SUMMARY }}
      KAOS_FLOWS_STATUS: ${{ steps.end-flows.outputs.KAOS_FLOWS_STATUS }}
    runs-on:
      group: kaos
    steps:
      - id: release-new-flow
        if: ${{ needs.job-core.outputs.KAOS_BRANCH == 'RN' }}
        run: |
          echo "RN - Este es el fichero implicado ${{ needs.job-core.outputs.KAOS_INVOLVED }}"
          KAOS_ISSUE_BODY="${{ env.KAOS_MODULE }} process ${{ needs.job-core.outputs.KAOS_BRANCH }} action over ${{ github.ref }} has been initiated by ${{ github.triggering_actor }}."
          gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-body="$KAOS_ISSUE_BODY"  -f kaos-issue-id=${{ needs.job-core.outputs.KAOS_NUMBER }} -f kaos-issue-actions=comment -f kaos-issue-body-file=${{ needs.job-core.outputs.KAOS_INVOLVED }}
          gh workflow run init.yaml  --ref ${{ github.ref }} -f kaos-issue-id=${{ needs.job-core.outputs.KAOS_NUMBER }} -f kaos-involved-file=${{ needs.job-core.outputs.KAOS_INVOLVED }} -f kaos-user-start="${{ needs.job-core.outputs.AUTHOR_NAME }}"
      - id: feature-flow
        if: ${{ needs.job-core.outputs.KAOS_BRANCH == 'F' }}
        run: |
          echo "F - Este es el fichero implicado ${{ needs.job-core.outputs.KAOS_INVOLVED }}"
          KAOS_ISSUE_BODY="${{ env.KAOS_MODULE }} process ${{ needs.job-core.outputs.KAOS_BRANCH }} action over ${{ github.ref }} has been initiated by ${{ github.triggering_actor }}."
          gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-body="$KAOS_ISSUE_BODY"  -f kaos-issue-id=${{ needs.job-core.outputs.KAOS_NUMBER }} -f kaos-issue-actions=comment -f kaos-issue-body-file=${{ needs.job-core.outputs.KAOS_INVOLVED }}
          gh workflow run init.yaml  --ref ${{ github.ref }} -f kaos-issue-id=${{ needs.job-core.outputs.KAOS_NUMBER }} -f kaos-involved-file=${{ needs.job-core.outputs.KAOS_INVOLVED }} -f kaos-user-start="${{ needs.job-core.outputs.AUTHOR_NAME }}"
      - id: hotfix-flow
        if: ${{ needs.job-core.outputs.KAOS_BRANCH == 'H' }}
        run: |
          echo "H - Este es el fichero implicado ${{ needs.job-core.outputs.KAOS_INVOLVED }}"
          KAOS_ISSUE_BODY="${{ env.KAOS_MODULE }} process ${{ needs.job-core.outputs.KAOS_BRANCH }} action over ${{ github.ref }} has been initiated by ${{ github.triggering_actor }}."
          gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-body="$KAOS_ISSUE_BODY"  -f kaos-issue-id=${{ needs.job-core.outputs.KAOS_NUMBER }} -f kaos-issue-actions=comment -f kaos-issue-body-file=${{ needs.job-core.outputs.KAOS_INVOLVED }}
          gh workflow run init.yaml  --ref ${{ github.ref }} -f kaos-issue-id=${{ needs.job-core.outputs.KAOS_NUMBER }} -f kaos-involved-file=${{ needs.job-core.outputs.KAOS_INVOLVED }} -f kaos-user-start="${{ needs.job-core.outputs.AUTHOR_NAME }}"
      - id: execution-flow
        if: ${{ needs.job-core.outputs.KAOS_BRANCH == 'E' }}
        run: |
          execution-flow
          echo "Branch name is ${{ github.ref }}"
          echo "Commit SHA is ${{ github.sha }}"
          echo "Repo origin is ${{ github.repository }}"
          echo "Launch by ${{ github.actor }}"
      - id: end-flows
        run: |
          KAOS_FLOWS_STATUS=$( echo "100%")
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "($_timestamp) - JOB_CODESCAN: ${{ needs.job-codescan.outputs.KAOS_CODESCAN_STATUS}}" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ needs.job-core.outputs.KAOS_NUMBER }}.txt
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "($_timestamp) - JOB_FLOWS: $KAOS_FLOWS_STATUS" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ needs.job-core.outputs.KAOS_NUMBER }}.txt
          gh issue comment ${{ needs.job-core.outputs.KAOS_NUMBER }} --body "La ejecución ha sido SUCCESS #${{ needs.job-core.outputs.KAOS_NUMBER }} el siguiente mensaje muestra el resultado de las operaciones"
  handle-success:
    runs-on: 
      group: kaos
    needs: [job-flows, job-core, job-compliance, job-security, job-observability, job-codescan, job-flows]
    if: ${{ success() && !contains(github.event.head_commit.message, '[Ka0S] ') }}
    steps:
      - id: handle-success-execution
        name: handle-success-execution
        run: |
          # Si todo ha ido correcto añadimos el contenido del fichero 
          gh issue comment ${{ needs.job-core.outputs.KAOS_NUMBER }} --body-file "${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ needs.job-core.outputs.KAOS_NUMBER }}.txt"
  handle_failure:
    runs-on: 
      group: kaos
    needs: [job-core, job-compliance, job-security, job-observability, job-codescan, job-flows]
    if: ${{ failure() }} 
    steps:
      - id: handle-failure-execution
        name: handle-failure-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_TOKEN }}
        run: |
          echo "Error detected in ${{ env.KAOS_MODULE }}, creating issue..."
          KAOS_TITLE="${{ env.KAOS_MODULE }} Module failed in ${{ env.KAOS_CODE }}"
          KAOS_BODY=$(cat <<'EOF'
          **${{ env.KAOS_MODULE }}  Message:**
          El error ha sido en: ${{ env.KAOS_CODE }}
          si dispòne de los permisos necesarios 
          ejecute este comando en su consola y podrá consultar el fallo del trabajo
          gh run view ${{ env.KAOS_CODE }} --log-failed
          \`\`\`
          **La información de la ejecución ${{ secrets.KAOS_ACTIONS_URL }}${{ env.KAOS_CODE }}**
          \`\`\`
          Please investigate the issue.
          EOF
          )
          # Creamos la issue dado que ha fallado el modulo principal
          gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-title="$KAOS_ISSUE_TITLE" -f kaos-issue-body="$KAOS_ISSUE_BODY" -f kaos-issue-actions=create -f kaos-issue-tag="bug" -f kaos-user-start="${{ needs.job-core.outputs.AUTHOR_NAME }}"
          # obtenemos le numero de la issue generada
          ISSUE_NUMBER=$(gh issue list --limit 1 --state open --label bug --json number --jq '.[0].number')
          echo "Mostramos el $ISSUE_NUMBER"
          # Añadimos el comentario a la issue que dispara el proceso
          KAOS_ISSUE_BODY="OPS¡ se ha producido un error en el proceso (${{ env.KAOS_MODULE }}) en la ejecución (${{ env.KAOS_CODE }}) y esto ha generado una issue con el titulo ($KAOS_ISSUE_TITLE)"
          gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-body="$KAOS_ISSUE_BODY" -f kaos-issue-actions=comment -f kaos-issue-tag="bug" -f kaos-issue-id=${{ needs.job-core.outputs.KAOS_NUMBER }}
  end-workflow:
    runs-on: 
      group: kaos
    needs: [job-core, job-compliance, job-security, job-observability, job-codescan, job-flows, handle-success, handle_failure]
    if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }} 
    steps:
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          gh workflow run inspector.yaml --ref ${{ github.ref }} -f kaos-issue-id="${{ steps.core.outputs.RNNUMBER }}" -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start="${{ needs.job-core.outputs.AUTHOR_NAME }}"
